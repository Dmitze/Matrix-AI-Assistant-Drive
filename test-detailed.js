/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏
 * —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫.
 */

import dotenv from 'dotenv';
import { logger } from './src/utils/logger.js';
import config from './src/config/config.js';
import { LLMProcessor } from './src/llm.js';
import { GoogleDriveHandler } from './src/gdrive.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function testConfiguration() {
  logger.info('üìã === –¢–ï–°–¢ 1: –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ===');
  
  try {
    config.logConfig();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const requiredVars = [
      'MATRIX_HOMESERVER_URL',
      'MATRIX_ACCESS_TOKEN', 
      'MATRIX_USER_ID'
    ];
    
    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
      logger.warn(`‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: ${missingVars.join(', ')}`);
      logger.info('üí° –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
    } else {
      logger.success('‚úÖ –í—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const optionalVars = [
      'OLLAMA_HOST',
      'OLLAMA_MODEL',
      'REDIS_URL',
      'GOOGLE_CREDENTIALS_PATH'
    ];
    
    const configuredOptional = optionalVars.filter(varName => process.env[varName]);
    logger.info(`üìä –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö: ${configuredOptional.length}/${optionalVars.length}`);
    
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM
async function testLLM() {
  logger.info('üß† === –¢–ï–°–¢ 2: LLM (OLLAMA) ===');
  
  try {
    const llm = new LLMProcessor();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.debug('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó LLM...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    if (llm.isAvailable()) {
      logger.success('‚úÖ LLM –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
      const modelInfo = await llm.getModelInfo();
      logger.info(`üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å:`, modelInfo);
      
      // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      try {
        logger.debug('üß™ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É...');
        const testResult = await llm.testConnection();
        
        if (testResult.success) {
          logger.success(`‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π: "${testResult.response}"`);
        } else {
          logger.warn(`‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: ${testResult.error}`);
        }
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É: ${error.message}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = llm.getStats();
      logger.debug('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM:', stats);
      
    } else {
      logger.warn('‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      logger.info('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Ollama –∑–∞–ø—É—â–µ–Ω–∏–π: ollama serve');
      logger.info('üí° –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama3');
    }
    
    return llm.isAvailable();
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è LLM:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Drive
async function testGoogleDrive() {
  logger.info('üìÅ === –¢–ï–°–¢ 3: GOOGLE DRIVE ===');
  
  try {
    const gdrive = new GoogleDriveHandler();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.debug('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Drive...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (gdrive.isConfigured()) {
      logger.success('‚úÖ Google Drive –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const connectionInfo = gdrive.getConnectionInfo();
      logger.info(`üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:`, connectionInfo);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = gdrive.getStats();
      logger.debug('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Drive:', stats);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
      try {
        logger.debug('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤...');
        const files = await gdrive.findFiles('test');
        logger.info(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: ${files.length}`);
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤: ${error.message}`);
      }
      
    } else {
      logger.warn('‚ö†Ô∏è Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      logger.info('üí° –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç Google');
      logger.info('üí° –î–æ–¥–∞–π—Ç–µ GOOGLE_CREDENTIALS_PATH –≤ .env —Ñ–∞–π–ª');
    }
    
    return gdrive.isConfigured();
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Google Drive:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function testLogging() {
  logger.info('üìù === –¢–ï–°–¢ 4: –õ–û–ì–£–í–ê–ù–ù–Ø ===');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.debug('üîç –¶–µ –≤—ñ–¥–ª–∞–¥–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (debug)');
    logger.info('‚ÑπÔ∏è –¶–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (info)');
    logger.warn('‚ö†Ô∏è –¶–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (warn)');
    logger.success('‚úÖ –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö (success)');
    logger.error('‚ùå –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (error)');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    const testObject = {
      name: '–¢–µ—Å—Ç–æ–≤–∏–π –æ–±\'—î–∫—Ç',
      value: 42,
      nested: { key: 'value' }
    };
    
    logger.info('üìä –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–±\'—î–∫—Ç–∞:', testObject);
    
    logger.success('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  logger.info('‚ö° === –¢–ï–°–¢ 5: –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨ ===');
  
  try {
    const startTime = Date.now();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const llm = new LLMProcessor();
    const gdrive = new GoogleDriveHandler();
    
    const initTime = Date.now() - startTime;
    logger.info(`‚è±Ô∏è –ß–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${initTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    const memoryUsage = process.memoryUsage();
    logger.info(`üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ:`, {
      rss: `${Math.round(memoryUsage.rss / 1024 / 1024)}MB`,
      heapUsed: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
      heapTotal: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`
    });
    
    logger.success('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async function testErrorHandling() {
  logger.info('üõ°Ô∏è === –¢–ï–°–¢ 6: –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö ===');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
    try {
      const nonExistentModule = await import('./non-existent.js');
    } catch (error) {
      logger.info('‚úÖ –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try {
      const llm = new LLMProcessor();
      await llm.generateResponse(''); // –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
    } catch (error) {
      logger.info('‚úÖ –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    }
    
    logger.success('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫:', error);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runDetailedTests() {
  logger.info('üß™ === –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–ò–• –¢–ï–°–¢–Ü–í ===');
  logger.info(`üïê –ß–∞—Å –∑–∞–ø—É—Å–∫—É: ${new Date().toISOString()}`);
  logger.info(`üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${process.env.NODE_ENV || 'development'}`);
  
  const results = {
    configuration: false,
    llm: false,
    googleDrive: false,
    logging: false,
    performance: false,
    errorHandling: false
  };
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results.configuration = await testConfiguration();
    results.llm = await testLLM();
    results.googleDrive = await testGoogleDrive();
    results.logging = await testLogging();
    results.performance = await testPerformance();
    results.errorHandling = await testErrorHandling();
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info('üìä === –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ ===');
    
    const passed = Object.values(results).filter(Boolean).length;
    const total = Object.keys(results).length;
    
    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ' : '‚ùå';
      logger.info(`${status} ${test}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
    });
    
    logger.info(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passed >= total * 0.8) {
      logger.success('üéâ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    } else {
      logger.warn(`‚ö†Ô∏è ${total - passed} —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    }
    
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ç–µ—Å—Ç—ñ–≤:', error);
  }
  
  logger.info('üèÅ === –î–ï–¢–ê–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runDetailedTests(); 