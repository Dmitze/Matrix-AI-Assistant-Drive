/**
 * –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,
 * –≤–∫–ª—é—á–∞—è ACL —Å —Ä–æ–ª—è–º–∏, E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ rate limiting.
 */

import config from './config/config.js';
import { logger } from './utils/logger.js';
import crypto from 'crypto';

export class SecurityManager {
  constructor() {
    this.allowedUsers = new Map(); // userId -> role
    this.allowedRooms = new Map(); // roomId -> permissions
    this.blockedUsers = new Set();
    this.rateLimits = new Map();
    this.maxMessageLength = config.matrix.maxMessageLength;
    this.encryptionEnabled = config.matrix.encryptionEnabled || false;
    
    // –†–æ–ª–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞
    this.roles = {
      admin: ['all'],
      moderator: ['read', 'write', 'search', 'help'],
      user: ['read', 'help'],
      guest: ['help']
    };
    
    logger.info('üõ°Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–ø–µ–∫–∏...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    this.loadSecurityConfig();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É rate limits
    this.startCleanupInterval();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  loadSecurityConfig() {
    try {
      // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏ (—Ñ–æ—Ä–º–∞—Ç: user1:admin,user2:moderator)
      const allowedUsersStr = process.env.ALLOWED_USERS || '';
      if (allowedUsersStr) {
        allowedUsersStr.split(',').forEach(userRole => {
          const [userId, role = 'user'] = userRole.trim().split(':');
          this.allowedUsers.set(userId, role);
        });
        logger.info(`üë• –î–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª—è–º–∏: ${this.allowedUsers.size}`);
      }

      // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —Å –ø—Ä–∞–≤–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: room1:read,write,room2:read)
      const allowedRoomsStr = process.env.ALLOWED_ROOMS || '';
      if (allowedRoomsStr) {
        allowedRoomsStr.split(',').forEach(roomPerms => {
          const [roomId, permissions = 'read'] = roomPerms.trim().split(':');
          this.allowedRooms.set(roomId, permissions.split(','));
        });
        logger.info(`üè† –î–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç –∑ –ø—Ä–∞–≤–∞–º–∏: ${this.allowedRooms.size}`);
      }

      // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const blockedUsersStr = process.env.BLOCKED_USERS || '';
      if (blockedUsersStr) {
        blockedUsersStr.split(',').forEach(user => {
          this.blockedUsers.add(user.trim());
        });
        logger.info(`üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${this.blockedUsers.size}`);
      }

      logger.success('‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏:', error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π
   */
  checkUserAccess(userId, requiredPermission = 'read') {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (this.blockedUsers.has(userId)) {
        logger.warn(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userId}`);
        return {
          allowed: false,
          reason: 'user_blocked',
          role: null
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = this.allowedUsers.get(userId) || 'guest';
      const userPermissions = this.roles[userRole] || [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
      if (userPermissions.includes('all') || userPermissions.includes(requiredPermission)) {
        return {
          allowed: true,
          reason: 'access_granted',
          role: userRole
        };
      }

      logger.warn(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId} (—Ä–æ–ª—å: ${userRole}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${requiredPermission})`);
      return {
        allowed: false,
        reason: 'insufficient_permissions',
        role: userRole
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.message);
      return {
        allowed: false,
        reason: 'error',
        role: null
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤
   */
  checkRoomAccess(roomId, requiredPermission = 'read') {
    try {
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º, —Ä–∞–∑—Ä–µ—à–∞–µ–º
      if (this.allowedRooms.size === 0) {
        return {
          allowed: true,
          reason: 'no_restrictions'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫–æ–º–Ω–∞—Ç—ã
      const roomPermissions = this.allowedRooms.get(roomId);
      if (!roomPermissions) {
        logger.warn(`üö´ –ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö: ${roomId}`);
        return {
          allowed: false,
          reason: 'room_not_allowed'
        };
      }

      if (roomPermissions.includes('all') || roomPermissions.includes(requiredPermission)) {
        return {
          allowed: true,
          reason: 'access_granted'
        };
      }

      logger.warn(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomId} (–ø–æ—Ç—Ä—ñ–±–Ω–æ: ${requiredPermission})`);
      return {
        allowed: false,
        reason: 'insufficient_permissions'
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', error.message);
      return {
        allowed: false,
        reason: 'error'
      };
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π rate limiting —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sliding window
   */
  checkRateLimit(userId, command, limit = 10, windowMs = 60000) {
    try {
      const key = `${userId}:${command}`;
      const now = Date.now();
      
      if (!this.rateLimits.has(key)) {
        this.rateLimits.set(key, []);
      }
      
      const requests = this.rateLimits.get(key);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const validRequests = requests.filter(timestamp => now - timestamp < windowMs);
      
      if (validRequests.length >= limit) {
        logger.warn(`‚è∞ Rate limit –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –¥–ª—è ${userId} (–∫–æ–º–∞–Ω–¥–∞: ${command})`);
        return {
          allowed: false,
          remaining: 0,
          resetTime: validRequests[0] + windowMs
        };
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      validRequests.push(now);
      this.rateLimits.set(key, validRequests);
      
      return {
        allowed: true,
        remaining: limit - validRequests.length,
        resetTime: now + windowMs
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ rate limit:', error.message);
      return {
        allowed: true, // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º
        remaining: 1,
        resetTime: Date.now() + 60000
      };
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  validateMessage(message) {
    try {
      if (!message || typeof message !== 'string') {
        return {
          valid: false,
          reason: 'invalid_type',
          details: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
      if (message.length > this.maxMessageLength) {
        return {
          valid: false,
          reason: 'too_long',
          details: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${this.maxMessageLength} —Å–∏–º–≤–æ–ª—ñ–≤`
        };
      }

      if (message.length === 0) {
        return {
          valid: false,
          reason: 'empty',
          details: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const suspiciousPatterns = [
        /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        /javascript:/gi,
        /on\w+\s*=/gi,
        /data:text\/html/gi
      ];

      for (const pattern of suspiciousPatterns) {
        if (pattern.test(message)) {
          return {
            valid: false,
            reason: 'suspicious_content',
            details: '–í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç'
          };
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (—Å–ø–∞–º)
      const repeatedChars = /(.)\1{10,}/;
      if (repeatedChars.test(message)) {
        return {
          valid: false,
          reason: 'spam_detected',
          details: '–í–∏—è–≤–ª–µ–Ω–æ —Å–ø–∞–º'
        };
      }

      return {
        valid: true,
        reason: 'valid'
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.message);
      return {
        valid: false,
        reason: 'validation_error',
        details: error.message
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π
   */
  validateCommand(command, args, userRole = 'guest') {
    try {
      // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ —Ä–æ–ª—è–º
      const commandPermissions = {
        'help': ['all'],
        'ask': ['user', 'moderator', 'admin'],
        'search': ['user', 'moderator', 'admin'],
        'read': ['user', 'moderator', 'admin'],
        'status': ['user', 'moderator', 'admin'],
        'ping': ['user', 'moderator', 'admin'],
        'admin_restart': ['admin'],
        'admin_config': ['admin'],
        'admin_cache_clear': ['admin'],
        'admin_metrics': ['admin', 'moderator']
      };

      const allowedRoles = commandPermissions[command] || ['admin'];
      
      if (!allowedRoles.includes('all') && !allowedRoles.includes(userRole)) {
        return {
          valid: false,
          reason: 'insufficient_permissions',
          details: `–ö–æ–º–∞–Ω–¥–∞ ${command} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–æ–ª—ñ ${userRole}`
        };
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
      switch (command) {
        case 'ask':
          if (!args || args.length === 0) {
            return {
              valid: false,
              reason: 'missing_arguments',
              details: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'
            };
          }
          break;
          
        case 'search':
        case 'read':
          if (!args || args.length === 0) {
            return {
              valid: false,
              reason: 'missing_arguments',
              details: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É'
            };
          }
          break;
      }

      return {
        valid: true,
        reason: 'valid'
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–∏:', error.message);
      return {
        valid: false,
        reason: 'validation_error',
        details: error.message
      };
    }
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  checkSecurity(userId, roomId, command, args, message) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userAccess = this.checkUserAccess(userId, 'read');
      if (!userAccess.allowed) {
        return {
          allowed: false,
          reason: userAccess.reason,
          details: '–î–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ
      const roomAccess = this.checkRoomAccess(roomId, 'read');
      if (!roomAccess.allowed) {
        return {
          allowed: false,
          reason: roomAccess.reason,
          details: '–î–æ—Å—Ç—É–ø –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const rateLimit = this.checkRateLimit(userId, command);
      if (!rateLimit.allowed) {
        return {
          allowed: false,
          reason: 'rate_limit_exceeded',
          details: `–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`
        };
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageValidation = this.validateMessage(message);
      if (!messageValidation.valid) {
        return {
          allowed: false,
          reason: messageValidation.reason,
          details: messageValidation.details
        };
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
      const commandValidation = this.validateCommand(command, args, userAccess.role);
      if (!commandValidation.valid) {
        return {
          allowed: false,
          reason: commandValidation.reason,
          details: commandValidation.details
        };
      }

      return {
        allowed: true,
        reason: 'all_checks_passed',
        userRole: userAccess.role,
        rateLimit: rateLimit
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏:', error.message);
      return {
        allowed: false,
        reason: 'security_check_error',
        details: error.message
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö rate limits
   */
  cleanupRateLimits() {
    try {
      const now = Date.now();
      let cleanedCount = 0;
      
      for (const [key, requests] of this.rateLimits.entries()) {
        const validRequests = requests.filter(timestamp => now - timestamp < 60000);
        if (validRequests.length === 0) {
          this.rateLimits.delete(key);
          cleanedCount++;
        } else if (validRequests.length !== requests.length) {
          this.rateLimits.set(key, validRequests);
        }
      }
      
      if (cleanedCount > 0) {
        logger.debug(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} rate limit –∑–∞–ø–∏—Å—ñ–≤`);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è rate limits:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏
   */
  startCleanupInterval() {
    setInterval(() => {
      this.cleanupRateLimits();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  getStats() {
    return {
      allowedUsers: this.allowedUsers.size,
      allowedRooms: this.allowedRooms.size,
      blockedUsers: this.blockedUsers.size,
      activeRateLimits: this.rateLimits.size,
      roles: Object.keys(this.roles),
      encryptionEnabled: this.encryptionEnabled
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  isEncryptionSupported() {
    return this.encryptionEnabled;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  generateSecureKey(length = 32) {
    return crypto.randomBytes(length).toString('hex');
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  hashData(data) {
    return crypto.createHash('sha256').update(data).digest('hex');
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export const securityManager = new SecurityManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function checkUserAccess(userId, permission = 'read') {
  return securityManager.checkUserAccess(userId, permission);
}

export function checkRoomAccess(roomId, permission = 'read') {
  return securityManager.checkRoomAccess(roomId, permission);
}

export function checkRateLimit(userId, command, limit = 10, windowMs = 60000) {
  return securityManager.checkRateLimit(userId, command, limit, windowMs);
}

export function validateMessage(message) {
  return securityManager.validateMessage(message);
}

export function validateCommand(command, args, userRole = 'guest') {
  return securityManager.validateCommand(command, args, userRole);
}

export function checkSecurity(userId, roomId, command, args, message) {
  return securityManager.checkSecurity(userId, roomId, command, args, message);
} 