/**
 * –ú–æ–¥—É–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã.
 */

import { createClient } from 'redis';
import crypto from 'crypto';
import config from './config/config.js';
import { logger } from './utils/logger.js';

export class CacheManager {
  constructor() {
    this.client = null;
    this.isConnected = false;
    this.keyPrefix = config.redis.keyPrefix;
    this.defaultTTL = config.redis.defaultTTL;
    
    logger.info('üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–µ—à—É Redis...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
   */
  async initialize() {
    try {
      if (!config.redis.url) {
        logger.warn('‚ö†Ô∏è Redis URL –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π, –∫–µ—à—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ');
        return;
      }

      logger.debug(`üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis: ${config.redis.url}`);
      
      this.client = createClient({
        url: config.redis.url,
        socket: {
          connectTimeout: 5000,
          lazyConnect: true
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.client.on('connect', () => {
        logger.success('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.isConnected = true;
      });

      this.client.on('ready', () => {
        logger.success('‚úÖ Redis –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
      });

      this.client.on('error', (error) => {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Redis:', error.message);
        this.isConnected = false;
      });

      this.client.on('end', () => {
        logger.warn('‚ö†Ô∏è –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ Redis –∑–∞–∫—Ä–∏—Ç–æ');
        this.isConnected = false;
      });

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
      await this.client.connect();
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Redis:', error.message);
      this.isConnected = false;
      
      if (error.code === 'ECONNREFUSED') {
        logger.info('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π');
      } else if (error.code === 'ENOTFOUND') {
        logger.info('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL Redis —Å–µ—Ä–≤–µ—Ä–∞');
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
   */
  generateKey(prefix, data) {
    const hash = crypto.createHash('md5').update(JSON.stringify(data)).digest('hex');
    return `${this.keyPrefix}${prefix}:${hash}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  async get(key) {
    try {
      if (!this.isConnected || !this.client) {
        return null;
      }

      logger.debug(`üîç –ü–æ—à—É–∫ –≤ –∫–µ—à—ñ: ${key}`);
      const value = await this.client.get(key);
      
      if (value) {
        logger.debug(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ: ${key}`);
        return JSON.parse(value);
      } else {
        logger.debug(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ: ${key}`);
        return null;
      }

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –∫–µ—à—É:', error.message);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
   */
  async set(key, value, ttl = this.defaultTTL) {
    try {
      if (!this.isConnected || !this.client) {
        return false;
      }

      logger.debug(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à: ${key} (TTL: ${ttl}s)`);
      
      await this.client.set(key, JSON.stringify(value), {
        EX: ttl
      });
      
      logger.debug(`‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–µ—à: ${key}`);
      return true;

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à:', error.message);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  async delete(key) {
    try {
      if (!this.isConnected || !this.client) {
        return false;
      }

      logger.debug(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É: ${key}`);
      const result = await this.client.del(key);
      
      if (result > 0) {
        logger.debug(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–µ—à—É: ${key}`);
        return true;
      } else {
        logger.debug(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${key}`);
        return false;
      }

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É:', error.message);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
   */
  async clear() {
    try {
      if (!this.isConnected || !this.client) {
        return false;
      }

      logger.info('üßπ –û—á–∏—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–µ—à—É...');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
      const keys = await this.client.keys(`${this.keyPrefix}*`);
      
      if (keys.length > 0) {
        await this.client.del(keys);
        logger.success(`‚úÖ –û—á–∏—â–µ–Ω–æ ${keys.length} –∫–ª—é—á—ñ–≤ –∑ –∫–µ—à—É`);
      } else {
        logger.info('‚ÑπÔ∏è –ö–µ—à –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π');
      }
      
      return true;

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  async getStats() {
    try {
      if (!this.isConnected || !this.client) {
        return {
          connected: false,
          keys: 0,
          memory: 'N/A'
        };
      }

      const info = await this.client.info('memory');
      const keys = await this.client.keys(`${this.keyPrefix}*`);
      
      return {
        connected: true,
        keys: keys.length,
        memory: info,
        prefix: this.keyPrefix,
        defaultTTL: this.defaultTTL
      };

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É:', error.message);
      return {
        connected: false,
        error: error.message
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
   */
  isAvailable() {
    return this.isConnected && this.client !== null;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
   */
  async disconnect() {
    try {
      if (this.client) {
        await this.client.quit();
        logger.success('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis –∑–∞–∫—Ä–∏—Ç–æ');
      }
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis:', error.message);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
const cacheManager = new CacheManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export async function getCachedResponse(userId, prompt) {
  const key = cacheManager.generateKey('llm', { userId, prompt });
  return await cacheManager.get(key);
}

export async function setCachedResponse(userId, prompt, response, ttl = 3600) {
  const key = cacheManager.generateKey('llm', { userId, prompt });
  return await cacheManager.set(key, response, ttl);
}

export async function getCachedFile(fileId) {
  const key = cacheManager.generateKey('file', { fileId });
  return await cacheManager.get(key);
}

export async function setCachedFile(fileId, content, ttl = 1800) {
  const key = cacheManager.generateKey('file', { fileId });
  return await cacheManager.set(key, content, ttl);
}

export { cacheManager }; 