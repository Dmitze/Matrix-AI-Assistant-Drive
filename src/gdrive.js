/**
 * –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Drive
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Google Drive API
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
 */

import { google } from 'googleapis';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import pdf from 'pdf-parse';
import * as XLSX from 'xlsx';
import config from './config/config.js';
import { logger } from './utils/logger.js';
import { withDriveRetry } from './utils/retry.js';
import { 
  recordDriveRequest, 
  recordDriveError, 
  recordFileProcessingTime 
} from './metrics.js';

export class GoogleDriveHandler {
  constructor() {
    this.drive = null;
    this.docs = null;
    this.sheets = null;
    this.isConfigured = false;
    this.serviceAccountEmail = null;
    
    logger.info('üìÅ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Drive –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ñ–∞–π–ª—ñ–≤...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive API
   */
  async initialize() {
    try {
      const credentialsPath = config.google.credentialsPath;
      
      if (!credentialsPath) {
        logger.warn('‚ö†Ô∏è –®–ª—è—Ö –¥–æ –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö Google Drive –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π');
        return;
      }

      if (!fs.existsSync(credentialsPath)) {
        logger.error('‚ùå –§–∞–π–ª –∑ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      logger.debug(`üìÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–∞–π–ª –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: ${credentialsPath}`);
      
      const credentials = JSON.parse(fs.readFileSync(credentialsPath, 'utf8'));
      this.serviceAccountEmail = credentials.client_email;

      logger.debug('üîê –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Google Drive');
      
      const auth = new google.auth.GoogleAuth({
        keyFile: credentialsPath,
        scopes: [
          'https://www.googleapis.com/auth/drive.readonly',
          'https://www.googleapis.com/auth/documents.readonly',
          'https://www.googleapis.com/auth/spreadsheets.readonly'
        ]
      });

      logger.success('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è Google —Å—Ç–≤–æ—Ä–µ–Ω–∞');

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
      this.drive = google.drive({ version: 'v3', auth });
      this.docs = google.docs({ version: 'v1', auth });
      this.sheets = google.sheets({ version: 'v4', auth });

      logger.success('‚úÖ Google API –∫–ª—ñ—î–Ω—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.testConnection();
      
      this.isConfigured = true;
      logger.success('‚úÖ Google Drive —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Drive:', error.message);
      
      if (error.code === 'ENOENT') {
        logger.error('‚ùå –§–∞–π–ª –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        logger.info('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö GOOGLE_CREDENTIALS_PATH');
      } else if (error.code === 'EACCES') {
        logger.error('‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
        logger.info('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É');
      } else if (error.message.includes('invalid_grant')) {
        logger.error('‚ùå –ù–µ–¥—ñ–π—Å–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Google');
        logger.info('ÔøΩÔøΩ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å JSON-–∫–ª—é—á–∞');
      } else if (error.message.includes('invalid_client')) {
        logger.error('‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç Google');
        logger.info('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –≤ Google Cloud Console');
      } else {
        logger.debug('üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
      }
      
      recordDriveError('initialization_error', 'initialize');
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive
   */
  async testConnection() {
    try {
      logger.debug('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Drive');
      
      const response = await withDriveRetry(async () => {
        return await this.drive.about.get({
          fields: 'user,storageQuota'
        });
      });

      if (response.data.user) {
        logger.success(`‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Google Drive —è–∫: ${response.data.user.emailAddress}`);
        recordDriveRequest('connection_test', 'success');
        
        if (response.data.storageQuota) {
          const quota = response.data.storageQuota;
          const usedGB = Math.round((quota.usage || 0) / 1024 / 1024 / 1024 * 100) / 100;
          const totalGB = Math.round((quota.limit || 0) / 1024 / 1024 / 1024 * 100) / 100;
          logger.info(`üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${usedGB}GB / ${totalGB}GB`);
        }
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Drive:', error.message);
      recordDriveError('connection_test_error', 'test_connection');
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ Google Drive
   */
  async findFiles(query, maxResults = 10) {
    const startTime = Date.now();
    
    try {
      if (!this.isConfigured) {
        throw new Error('Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      }

      logger.debug(`üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤: "${query}"`);
      
      const response = await withDriveRetry(async () => {
        return await this.drive.files.list({
          q: `name contains '${query}' and trashed = false`,
          fields: 'files(id,name,mimeType,size,modifiedTime,parents)',
          pageSize: maxResults,
          orderBy: 'modifiedTime desc'
        });
      });

      const files = response.data.files || [];
      const duration = (Date.now() - startTime) / 1000;
      
      logger.info(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${files.length} (${duration.toFixed(2)}s)`);
      recordDriveRequest('file_search', 'success');
      recordFileProcessingTime(duration, 'search');
      
      return files;
      
    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤:', error.message);
      recordDriveError('search_error', 'find_files');
      recordFileProcessingTime(duration, 'search_error');
      throw error;
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ ID
   */
  async readFile(fileId, fileIndex = 0) {
    const startTime = Date.now();
    
    try {
      if (!this.isConfigured) {
        throw new Error('Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      }

      logger.debug(`üìñ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: ${fileId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileInfo = await withDriveRetry(async () => {
        return await this.drive.files.get({
          fileId: fileId,
          fields: 'id,name,mimeType,size,modifiedTime'
        });
      });

      const file = fileInfo.data;
      logger.info(`üìÑ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: ${file.name} (${file.mimeType})`);
      
      let content = '';
      const fileType = this.getFileType(file.mimeType);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (fileType) {
        case 'google_doc':
          content = await this.readGoogleDoc(fileId);
          break;
        case 'google_sheet':
          content = await this.readGoogleSheet(fileId);
          break;
        case 'pdf':
          content = await this.readPdfFile(fileId);
          break;
        case 'excel':
        case 'word':
          content = await this.readOfficeFile(fileId, fileType);
          break;
        default:
          throw new Error(`–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É: ${file.mimeType}`);
      }

      const duration = (Date.now() - startTime) / 1000;
      logger.success(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${file.name} (${duration.toFixed(2)}s, ${content.length} —Å–∏–º–≤–æ–ª—ñ–≤)`);
      
      recordDriveRequest('file_read', 'success', fileType);
      recordFileProcessingTime(duration, fileType);
      
      return {
        id: file.id,
        name: file.name,
        mimeType: file.mimeType,
        content: content,
        size: file.size,
        modifiedTime: file.modifiedTime,
        processingTime: duration,
        characterCount: content.length
      };
      
    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error.message);
      recordDriveError('read_error', 'read_file');
      recordFileProcessingTime(duration, 'read_error');
      throw error;
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ Google Doc
   */
  async readGoogleDoc(fileId) {
    try {
      logger.debug('üìù –ß–∏—Ç–∞–Ω–Ω—è Google Doc');
      
      const response = await withDriveRetry(async () => {
        return await this.docs.documents.get({
          documentId: fileId
        });
      });

      const document = response.data;
      let content = '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (document.body && document.body.content) {
        content = this.extractTextFromDocContent(document.body.content);
      }
      
      logger.debug(`üìÑ Google Doc —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ: ${content.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      return content;
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Google Doc:', error.message);
      recordDriveError('google_doc_error', 'read_google_doc');
      throw error;
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ Google Sheet
   */
  async readGoogleSheet(fileId, range = 'A1:Z1000') {
    try {
      logger.debug(`üìä –ß–∏—Ç–∞–Ω–Ω—è Google Sheet –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º: ${range}`);
      
      const response = await withDriveRetry(async () => {
        return await this.sheets.spreadsheets.values.get({
          spreadsheetId: fileId,
          range: range
        });
      });

      const values = response.data.values || [];
      let content = '';
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      for (let i = 0; i < values.length; i++) {
        const row = values[i];
        content += `–†—è–¥–æ–∫ ${i + 1}: ${row.join(' | ')}\n`;
      }
      
      logger.debug(`üìä Google Sheet –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${values.length} —Ä—è–¥–∫—ñ–≤`);
      return content;
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Google Sheet:', error.message);
      recordDriveError('google_sheet_error', 'read_google_sheet');
      throw error;
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
   */
  async readPdfFile(fileId) {
    try {
      logger.debug('üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è PDF —Ñ–∞–π–ª—É');
      
      const response = await withDriveRetry(async () => {
        return await this.drive.files.get({
          fileId: fileId,
          alt: 'media',
          responseType: 'arraybuffer'
        });
      });

      const buffer = Buffer.from(response.data);
      logger.debug('‚úÖ PDF —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
      
      logger.debug('üîç –ü–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª—É...');
      const data = await pdf(buffer);
      
      logger.debug(`üìÑ PDF —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ: ${data.text.length} —Å–∏–º–≤–æ–ª—ñ–≤, ${data.numpages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫`);
      
      return `PDF –¥–æ–∫—É–º–µ–Ω—Ç (${data.numpages} —Å—Ç–æ—Ä—ñ–Ω–æ–∫):\n\n${data.text}`;
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—É:', error.message);
      
      if (error.message.includes('Invalid PDF')) {
        recordDriveError('pdf_parse_error', 'read_pdf');
        return '[PDF —Ñ–∞–π–ª - –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –≤–º—ñ—Å—Ç—É]';
      } else {
        recordDriveError('pdf_download_error', 'read_pdf');
        throw error;
      }
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ Office —Ñ–∞–π–ª–æ–≤ (Excel, Word)
   */
  async readOfficeFile(fileId, fileType) {
    try {
      logger.debug(`üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Office —Ñ–∞–π–ª—É (${fileType})`);
      
      const response = await withDriveRetry(async () => {
        return await this.drive.files.get({
          fileId: fileId,
          alt: 'media',
          responseType: 'arraybuffer'
        });
      });

      const buffer = Buffer.from(response.data);
      logger.debug('‚úÖ Office —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
      
      if (fileType === 'excel') {
        return await this.parseExcelFile(buffer);
      } else if (fileType === 'word') {
        return await this.parseWordFile(buffer);
      } else {
        throw new Error(`–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø Office —Ñ–∞–π–ª—É: ${fileType}`);
      }
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Office —Ñ–∞–π–ª—É:', error.message);
      recordDriveError('office_read_error', 'read_office');
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞
   */
  async parseExcelFile(buffer) {
    try {
      logger.debug('üìä –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª—É...');
      
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      const sheetNames = workbook.SheetNames;
      
      let content = `Excel —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å ${sheetNames.length} –∞—Ä–∫—É—à—ñ–≤:\n\n`;
      
      for (let i = 0; i < sheetNames.length; i++) {
        const sheetName = sheetNames[i];
        const worksheet = workbook.Sheets[sheetName];
        const csvText = XLSX.utils.sheet_to_csv(worksheet);
        
        content += `–ê—Ä–∫—É—à "${sheetName}":\n${csvText}\n\n`;
      }
      
      logger.debug(`üìä Excel –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ: ${sheetNames.length} –∞—Ä–∫—É—à—ñ–≤`);
      return content;
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Excel —Ñ–∞–π–ª—É:', error.message);
      recordDriveError('excel_parse_error', 'parse_excel');
      return '[Excel —Ñ–∞–π–ª - –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –≤–º—ñ—Å—Ç—É]';
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ Word —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async parseWordFile(buffer) {
    try {
      logger.debug('üìù –ü–∞—Ä—Å–∏–Ω–≥ Word —Ñ–∞–π–ª—É...');
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Word —Ñ–∞–π–ª–æ–≤
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É mammoth
      const content = '[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ Word —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–æ]';
      
      logger.debug('üìù Word —Ñ–∞–π–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)');
      return content;
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Word —Ñ–∞–π–ª—É:', error.message);
      recordDriveError('word_parse_error', 'parse_word');
      return '[Word —Ñ–∞–π–ª - –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –≤–º—ñ—Å—Ç—É]';
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Google Doc
   */
  extractTextFromDocContent(content) {
    let text = '';
    
    for (const element of content) {
      if (element.paragraph) {
        for (const paragraphElement of element.paragraph.elements) {
          if (paragraphElement.textRun) {
            text += paragraphElement.textRun.content;
          }
        }
        text += '\n';
      }
    }
    
    return text.trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
   */
  getFileType(mimeType) {
    if (mimeType === 'application/vnd.google-apps.document') {
      return 'google_doc';
    } else if (mimeType === 'application/vnd.google-apps.spreadsheet') {
      return 'google_sheet';
    } else if (mimeType === 'application/pdf') {
      return 'pdf';
    } else if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) {
      return 'excel';
    } else if (mimeType.includes('word') || mimeType.includes('document')) {
      return 'word';
    } else {
      return 'unknown';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  isConfigured() {
    return this.isConfigured;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
   */
  getConnectionInfo() {
    return {
      configured: this.isConfigured,
      serviceAccount: this.serviceAccountEmail,
      apis: {
        drive: !!this.drive,
        docs: !!this.docs,
        sheets: !!this.sheets
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      configured: this.isConfigured,
      serviceAccount: this.serviceAccountEmail,
      supportedFormats: ['google_doc', 'google_sheet', 'pdf', 'excel', 'word']
    };
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Google Drive
export const googleDriveHandler = new GoogleDriveHandler(); 