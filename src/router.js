/**
 * –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
 */

import { logger } from './utils/logger.js';
import { LLMProcessor } from './llm.js';
import { GoogleDriveHandler } from './gdrive.js';
import { getCachedResponse, setCachedResponse, getCachedFile, setCachedFile } from './cache.js';
import { recordBotRequest, recordLLMLatency, recordLLMError, recordDriveRequest, recordDriveError, recordCacheHit, recordCacheMiss } from './metrics.js';
import { checkSecurity } from './security.js';

export class CommandRouter {
  constructor(client) {
    this.client = client;
    this.llm = new LLMProcessor();
    this.gdrive = new GoogleDriveHandler();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    this.commands = {
      'help': this.handleHelp.bind(this),
      'ask': this.handleAsk.bind(this),
      'find': this.handleFind.bind(this),
      'read': this.handleRead.bind(this),
      'status': this.handleStatus.bind(this),
      'ping': this.handlePing.bind(this)
    };
    
    logger.info('üõ£Ô∏è –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  async handleCommand(command, args, event, room) {
    const startTime = Date.now();
    
    try {
      const commandName = command.toLowerCase();
      const sender = event.getSender();
      const roomId = event.getRoomId();
      const message = event.getContent().body || '';

      logger.info(`üîß –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏: ${commandName} –≤—ñ–¥ ${sender} –≤ ${roomId}`);
      logger.debug(`üìã –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–∏: [${args.join(', ')}]`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const securityCheck = checkSecurity(sender, roomId, commandName, args, message);
      if (!securityCheck.allowed) {
        logger.warn(`üö´ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ –¥–ª—è ${sender}: ${securityCheck.checks}`);
        
        let reason = '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ';
        if (securityCheck.checks.rateLimit?.reason === 'rate_limit_exceeded') {
          reason = `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${securityCheck.checks.rateLimit.retryAfter} —Å–µ–∫—É–Ω–¥`;
        } else if (securityCheck.checks.userAccess?.reason === 'user_blocked') {
          reason = '–í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ';
        } else if (securityCheck.checks.messageValidation?.issues?.includes('message_too_long')) {
          reason = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ';
        }
        
        await this.sendResponse(roomId, `‚ùå ${reason}`);
        recordBotRequest(commandName, 'blocked');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞
      if (!this.commands[commandName]) {
        logger.warn(`‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${commandName} –≤—ñ–¥ ${sender}`);
        await this.sendResponse(roomId, 
          `‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${commandName}\n` +
          `–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.`);
        recordBotRequest(commandName, 'unknown');
        return;
      }

      logger.debug(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${commandName} –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ–Ω—É—î–º–æ...`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      await this.commands[commandName](args, event, room);

      const responseTime = Date.now() - startTime;
      logger.debug(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${commandName} –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑–∞ ${responseTime}ms`);
      recordBotRequest(commandName, 'success');

    } catch (error) {
      const responseTime = Date.now() - startTime;
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ (${responseTime}ms):`, error.message);
      logger.debug('üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
      
      await this.sendResponse(event.getRoomId(), 
        '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      recordBotRequest(command, 'error');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
   */
  async sendResponse(roomId, text) {
    try {
      const response = await this.client.sendTextMessage(roomId, text);
      logger.debug(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ ${roomId}`);
      return response;
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ
   */
  async updateMessage(roomId, eventId, newText) {
    try {
      const response = await this.client.sendEvent(roomId, 'm.room.message', {
        msgtype: 'm.text',
        body: newText,
        'm.new_content': {
          msgtype: 'm.text',
          body: newText
        },
        'm.relates_to': {
          rel_type: 'm.replace',
          event_id: eventId
        }
      });
      logger.debug(`üìù –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${eventId} –≤ ${roomId}`);
      return response;
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${eventId} –≤ ${roomId}:`, error.message);
      throw error;
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
   */
  async handleHelp(args, event, room) {
    const helpText = `
ü§ñ **Matrix AI Assistant Drive - –î–æ–≤—ñ–¥–∫–∞**

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

üîç **!ask <–ø–∏—Ç–∞–Ω–Ω—è>** - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç—É
   –ü—Ä–∏–∫–ª–∞–¥: !ask –Ø–∫ –ø—Ä–∞—Ü—é—î –∫–≤–∞–Ω—Ç–æ–≤–∞ —Ñ—ñ–∑–∏–∫–∞?
   –°—Ç—Ä–∏–º—ñ–Ω–≥: !ask --stream –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å

üìÅ **!find <–Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É>** - –ó–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ Google Drive
   –ü—Ä–∏–∫–ª–∞–¥: !find –∑–≤—ñ—Ç –∑–∞ –±–µ—Ä–µ–∑–µ–Ω—å

üìÑ **!read <–Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É>** - –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É
   –ü—Ä–∏–∫–ª–∞–¥: !read –ø–ª–∞–Ω —Ä–æ–∑–≤–∏—Ç–∫—É

üìä **!status** - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

üèì **!ping** - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –±–æ—Ç–∞

‚ùì **!help** - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤:**
‚Ä¢ Google Docs
‚Ä¢ Google Sheets  
‚Ä¢ PDF —Ñ–∞–π–ª–∏
‚Ä¢ Excel —Ñ–∞–π–ª–∏
‚Ä¢ Word –¥–æ–∫—É–º–µ–Ω—Ç–∏

**–ü—Ä–∏–º—ñ—Ç–∫–∞:** –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Drive –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.
    `.trim();

    await this.sendResponse(event.getRoomId(), helpText);
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
   */
  async handleAsk(args, event, room) {
    const startTime = Date.now();
    
    try {
      if (args.length === 0) {
        await this.sendResponse(event.getRoomId(), 
          '‚ùå –í–∫–∞–∂—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è AI.\n–ü—Ä–∏–∫–ª–∞–¥: !ask –©–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?\n–î–ª—è —Å—Ç—Ä–∏–º—ñ–Ω–≥—É: !ask --stream –©–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?');
        return;
      }

      const question = args.join(' ');
      const sender = event.getSender();
      const useStreaming = args.includes('--stream') || args.includes('-s');
      
      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
      const cleanQuestion = question.replace(/--stream|-s/g, '').trim();

      logger.info(`ü§ñ –ó–∞–ø–∏—Ç –¥–æ AI –≤—ñ–¥ ${sender}: ${cleanQuestion.substring(0, 100)}... (—Å—Ç—Ä–∏–º—ñ–Ω–≥: ${useStreaming})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
      if (!useStreaming) {
        const cachedResponse = await getCachedResponse(sender, cleanQuestion);
        if (cachedResponse) {
          logger.debug(`üíæ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–µ—à–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è ${sender}`);
          await this.sendResponse(event.getRoomId(), 
            `ü§ñ **–í—ñ–¥–ø–æ–≤—ñ–¥—å AI (–∑ –∫–µ—à—É):**\n\n${cachedResponse}`);
          recordCacheHit('llm');
          return;
        }
        recordCacheMiss('llm');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
      const processingMsg = useStreaming ? 
        'üåä –ü–æ—á–∏–Ω–∞—é —Å—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...' : 
        'ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º...';
      await this.sendResponse(event.getRoomId(), processingMsg);

      let response;
      const llmStartTime = Date.now();

      if (useStreaming) {
        // –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response = await this.handleStreamingResponse(cleanQuestion, event.getRoomId());
      } else {
        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = await this.llm.generateResponse(cleanQuestion);
      }

      const llmDuration = (Date.now() - llmStartTime) / 1000;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      recordLLMLatency(llmDuration);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
      if (!useStreaming) {
        await setCachedResponse(sender, cleanQuestion, response.response);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
      if (!useStreaming) {
        await this.sendResponse(event.getRoomId(), 
          `ü§ñ **–í—ñ–¥–ø–æ–≤—ñ–¥—å AI:**\n\n${response.response}`);
      }

    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ ask (${duration.toFixed(2)}s):`, error.message);
      recordLLMError('request_failed');
      await this.sendResponse(event.getRoomId(), 
        '‚ùå –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async handleStreamingResponse(question, roomId) {
    let currentMessage = '';
    let messageId = null;
    
    return new Promise((resolve, reject) => {
      this.llm.generateStreamingResponse(question, async (chunk, info) => {
        try {
          if (info.done) {
            // –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
            logger.success(`‚úÖ –°—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${info.chunkCount} —á–∞–Ω–∫—ñ–≤)`);
            resolve({
              response: info.fullResponse,
              duration: 0, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ
              chunks: info.chunkCount,
              tokens: info.totalTokens
            });
            return;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
          currentMessage += chunk;
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (!messageId) {
            const response = await this.sendResponse(roomId, `ü§ñ **–í—ñ–¥–ø–æ–≤—ñ–¥—å AI (—Å—Ç—Ä–∏–º—ñ–Ω–≥):**\n\n${currentMessage}`);
            messageId = response?.event_id;
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.updateMessage(roomId, messageId, `ü§ñ **–í—ñ–¥–ø–æ–≤—ñ–¥—å AI (—Å—Ç—Ä–∏–º—ñ–Ω–≥):**\n\n${currentMessage}`);
          }

        } catch (error) {
          logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤–æ–≥–æ —á–∞–Ω–∫—É:', error.message);
          reject(error);
        }
      });
    });
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: find - –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ Google Drive
   */
  async handleFind(args, event, room) {
    const startTime = Date.now();
    
    try {
      if (args.length === 0) {
        await this.sendResponse(event.getRoomId(), 
          '‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è –ø–æ—à—É–∫—É.\n–ü—Ä–∏–∫–ª–∞–¥: !find –∑–≤—ñ—Ç');
        return;
      }

      const query = args.join(' ');
      const sender = event.getSender();

      logger.info(`üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—É –≤—ñ–¥ ${sender}: ${query}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Google Drive
      if (!this.gdrive.isConfigured()) {
        await this.sendResponse(event.getRoomId(), 
          '‚ùå Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      await this.sendResponse(event.getRoomId(), 
        'üîç –®—É–∫–∞—é —Ñ–∞–π–ª–∏ –≤ Google Drive...');

      // –ò—â–µ–º —Ñ–∞–π–ª—ã
      const files = await this.gdrive.findFiles(query);
      recordDriveRequest('search', 'success');

      if (files.length === 0) {
        await this.sendResponse(event.getRoomId(), 
          `üîç –§–∞–π–ª–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "${query}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      let response = `üìÅ **–ó–Ω–∞–π–¥–µ–Ω—ñ —Ñ–∞–π–ª–∏:**\n\n`;
      
      files.forEach((file, index) => {
        response += `${index + 1}. **${file.name}**\n`;
        response += `   –¢–∏–ø: ${this.getFileTypeName(file.mimeType)}\n`;
        response += `   ID: \`${file.id}\`\n\n`;
      });

      response += `üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !read <–Ω–æ–º–µ—Ä> –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É`;

      await this.sendResponse(event.getRoomId(), response);

    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤ (${duration}s):`, error.message);
      recordDriveError('search_failed');
      await this.sendResponse(event.getRoomId(), 
        '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Drive.');
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: read - –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
   */
  async handleRead(args, event, room) {
    const startTime = Date.now();
    
    try {
      if (args.length === 0) {
        await this.sendResponse(event.getRoomId(), 
          '‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è.\n–ü—Ä–∏–∫–ª–∞–¥: !read –∑–≤—ñ—Ç');
        return;
      }

      const sender = event.getSender();
      let fileName = args.join(' ');
      let fileIndex = 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
      const lastArg = args[args.length - 1];
      if (/^\d+$/.test(lastArg)) {
        fileIndex = parseInt(lastArg);
        fileName = args.slice(0, -1).join(' ');
      }

      logger.info(`üìÑ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –≤—ñ–¥ ${sender}: ${fileName} (—ñ–Ω–¥–µ–∫—Å: ${fileIndex})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Google Drive
      if (!this.gdrive.isConfigured()) {
        await this.sendResponse(event.getRoomId(), 
          '‚ùå Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
      }

      await this.sendResponse(event.getRoomId(), 
        'üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª...');

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const result = await this.gdrive.readFile(fileName, fileIndex);
      recordDriveRequest('read', 'success');

      if (!result) {
        await this.sendResponse(event.getRoomId(), 
          `‚ùå –§–∞–π–ª "${fileName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      let response = `üìÑ **–í–º—ñ—Å—Ç —Ñ–∞–π–ª—É:**\n`;
      response += `üìÅ –§–∞–π–ª: ${result.file.name}\n`;
      response += `üìä –¢–∏–ø: ${this.getFileTypeName(result.file.mimeType)}\n`;
      
      if (result.totalFiles > 1) {
        response += `üìã –ü–æ–∫–∞–∑–∞–Ω–æ —Ñ–∞–π–ª ${result.fileIndex + 1} –∑ ${result.totalFiles}\n`;
        response += `üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !read ${fileName} <–Ω–æ–º–µ—Ä> –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω—à–æ–≥–æ —Ñ–∞–π–ª—É\n\n`;
      } else {
        response += '\n';
      }
      
      response += result.content;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      await this.sendResponse(event.getRoomId(), response);

    } catch (error) {
      const duration = (Date.now() - startTime) / 1000;
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É (${duration}s):`, error.message);
      recordDriveError('read_failed');
      
      let errorMessage = '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É.';
      
      if (error.message.includes('–Ü–Ω–¥–µ–∫—Å —Ñ–∞–π–ª—É')) {
        errorMessage = `‚ùå ${error.message}\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !find ${fileName} –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤`;
      } else if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        errorMessage = `‚ùå –§–∞–π–ª "${fileName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !find ${fileName} –¥–ª—è –ø–æ—à—É–∫—É`;
      }
      
      await this.sendResponse(event.getRoomId(), errorMessage);
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
   */
  async handleStatus(args, event, room) {
    const status = {
      bot: 'üü¢ –ü—Ä–∞—Ü—é—î',
      llm: this.llm.isAvailable() ? 'üü¢ –î–æ—Å—Ç—É–ø–Ω–∏–π' : 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
      gdrive: this.gdrive.isConfigured() ? 'üü¢ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π' : 'üî¥ –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'
    };

    const statusText = `
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

ü§ñ –ë–æ—Ç: ${status.bot}
üß† AI (Ollama): ${status.llm}
üìÅ Google Drive: ${status.gdrive}

üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ !help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥
    `.trim();

    await this.sendResponse(event.getRoomId(), statusText);
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
   */
  async handlePing(args, event, room) {
    const startTime = Date.now();
    
    try {
      await this.sendResponse(event.getRoomId(), 'üèì Pong!');
      
      const responseTime = Date.now() - startTime;
      logger.debug(`üèì Ping –≤—ñ–¥ ${event.getSender()}, —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseTime}ms`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ping:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
   */
  getFileTypeName(mimeType) {
    const types = {
      'application/vnd.google-apps.document': 'Google Doc',
      'application/vnd.google-apps.spreadsheet': 'Google Sheet',
      'application/pdf': 'PDF',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word'
    };
    
    return types[mimeType] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø';
  }
} 