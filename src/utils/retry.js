/**
 * –ú–æ–¥—É–ª—å –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
 * —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
 */

import { logger } from './logger.js';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
const DEFAULT_CONFIG = {
  maxAttempts: 3,
  baseDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
  maxDelay: 30000, // 30 —Å–µ–∫—É–Ω–¥
  backoffMultiplier: 2,
  jitter: 0.1, // 10% —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
  retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND', 'ECONNREFUSED']
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å jitter
 */
function calculateDelay(attempt, config) {
  const exponentialDelay = Math.min(
    config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1),
    config.maxDelay
  );
  
  const jitter = exponentialDelay * config.jitter * (Math.random() - 0.5);
  return Math.max(0, exponentialDelay + jitter);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ–π
 */
function isRetryableError(error, config) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
  if (error.code && config.retryableErrors.includes(error.code)) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
  if (error.response && error.response.status) {
    const status = error.response.status;
    return status >= 500 || status === 429; // 5xx –æ—à–∏–±–∫–∏ –∏ 429 (Too Many Requests)
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  if (error.message) {
    const message = error.message.toLowerCase();
    return message.includes('timeout') || 
           message.includes('connection') || 
           message.includes('network') ||
           message.includes('econnreset') ||
           message.includes('etimedout');
  }
  
  return false;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
export async function withRetry(operation, config = {}) {
  const finalConfig = { ...DEFAULT_CONFIG, ...config };
  let lastError;
  
  for (let attempt = 1; attempt <= finalConfig.maxAttempts; attempt++) {
    try {
      logger.debug(`üîÑ –°–ø—Ä–æ–±–∞ ${attempt}/${finalConfig.maxAttempts}`);
      
      const result = await operation();
      
      if (attempt > 1) {
        logger.success(`‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ –ø—ñ—Å–ª—è ${attempt} —Å–ø—Ä–æ–±`);
      }
      
      return result;
      
    } catch (error) {
      lastError = error;
      
      logger.warn(`‚ùå –°–ø—Ä–æ–±–∞ ${attempt} –Ω–µ–≤–¥–∞–ª–∞: ${error.message}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
      if (attempt === finalConfig.maxAttempts || !isRetryableError(error, finalConfig)) {
        logger.error(`üí• –í—Å—ñ —Å–ø—Ä–æ–±–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è`);
        throw error;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      const delay = calculateDelay(attempt, finalConfig);
      logger.info(`‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ${Math.round(delay)}ms –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError;
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function withHttpRetry(axiosInstance, config, retryConfig = {}) {
  const httpRetryConfig = {
    ...DEFAULT_CONFIG,
    maxAttempts: 3,
    baseDelay: 2000,
    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND', 'ECONNREFUSED', 'ECONNABORTED'],
    ...retryConfig
  };
  
  return withRetry(async () => {
    return await axiosInstance(config);
  }, httpRetryConfig);
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è LLM –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function withLLMRetry(operation, retryConfig = {}) {
  const llmRetryConfig = {
    ...DEFAULT_CONFIG,
    maxAttempts: 2,
    baseDelay: 3000,
    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ECONNREFUSED'],
    ...retryConfig
  };
  
  return withRetry(operation, llmRetryConfig);
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Google Drive –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function withDriveRetry(operation, retryConfig = {}) {
  const driveRetryConfig = {
    ...DEFAULT_CONFIG,
    maxAttempts: 3,
    baseDelay: 1000,
    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND', 'ECONNREFUSED'],
    ...retryConfig
  };
  
  return withRetry(operation, driveRetryConfig);
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Redis –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withRedisRetry(operation, retryConfig = {}) {
  const redisRetryConfig = {
    ...DEFAULT_CONFIG,
    maxAttempts: 2,
    baseDelay: 500,
    retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ECONNREFUSED'],
    ...retryConfig
  };
  
  return withRetry(operation, redisRetryConfig);
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
export async function testRetryMechanism() {
  logger.info('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ö–∞–Ω—ñ–∑–º—É –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±...');
  
  let attemptCount = 0;
  const failingOperation = async () => {
    attemptCount++;
    if (attemptCount < 3) {
      throw new Error('–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è');
    }
    return '–£—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
  };
  
  try {
    const result = await withRetry(failingOperation, {
      maxAttempts: 3,
      baseDelay: 100
    });
    
    logger.success(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ: ${result}`);
    return true;
  } catch (error) {
    logger.error(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${error.message}`);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
export function createRetryConfig(options = {}) {
  return {
    ...DEFAULT_CONFIG,
    ...options
  };
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */
export function logRetryStats(operation, attempt, maxAttempts, error) {
  logger.debug(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –¥–ª—è ${operation}: ${attempt}/${maxAttempts}`);
  if (error) {
    logger.debug(`üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: ${error.code || 'N/A'} - ${error.message}`);
  }
} 