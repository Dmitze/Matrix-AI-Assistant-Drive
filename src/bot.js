/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Matrix,
 * –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 */

import { createClient } from 'matrix-js-sdk';
import config from './config/config.js';
import { logger } from './utils/logger.js';
import { CommandRouter } from './router.js';

export class Bot {
  constructor() {
    this.client = null;
    this.router = null;
    this.isRunning = false;
    this.processedEvents = new Set(); // –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    logger.info('ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Matrix
      await this.initializeMatrixClient();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥
      this.router = new CommandRouter(this.client);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      this.setupEventHandlers();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      await this.client.startClient({
        initialSyncLimit: config.matrix.initialSyncLimit
      });
      
      this.isRunning = true;
      logger.success('‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ Matrix!');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const userId = this.client.getUserId();
      const deviceId = this.client.getDeviceId();
      logger.info(`üë§ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —è–∫: ${userId}`);
      logger.info(`üì± Device ID: ${deviceId}`);
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Matrix
   */
  async initializeMatrixClient() {
    try {
      logger.info('üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Matrix homeserver...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Matrix
      this.client = createClient({
        baseUrl: config.matrix.homeserverUrl,
        accessToken: config.matrix.accessToken,
        userId: config.matrix.userId
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞
      this.client.on('sync', (state, prevState, res) => {
        if (state === 'PREPARED') {
          logger.success('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Matrix –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
      });

      this.client.on('error', (error) => {
        logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Matrix –∫–ª—ñ—î–Ω—Ç–∞:', error);
      });

      logger.success('‚úÖ Matrix –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Matrix –∫–ª—ñ—î–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
    this.client.on('Room.timeline', (event, room, toStartOfTimeline) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      if (event.getType() !== 'm.room.message') {
        return;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
      if (toStartOfTimeline) {
        return;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (event.isRedacted()) {
        return;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
      if (event.getSender() === this.client.getUserId()) {
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.handleMessage(event, room);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç—ã
    this.client.on('RoomMember.membership', (event, member) => {
      if (event.getType() === 'm.room.member' && 
          event.getContent().membership === 'invite' &&
          event.getStateKey() === this.client.getUserId()) {
        
        logger.info(`üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏: ${event.getRoomId()}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        this.client.joinRoom(event.getRoomId()).then(() => {
          logger.success(`‚úÖ –ü—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏: ${event.getRoomId()}`);
        }).catch((error) => {
          logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏: ${error}`);
        });
      }
    });

    logger.info('üì° –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleMessage(event, room) {
    try {
      const content = event.getContent();
      const sender = event.getSender();
      const roomId = event.getRoomId();
      const messageText = content.body;
      const eventId = event.getId();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
      if (this.processedEvents.has(eventId)) {
        logger.debug(`üîÑ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${eventId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      this.processedEvents.add(eventId);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      if (this.processedEvents.size > 1000) {
        const firstEvent = this.processedEvents.values().next().value;
        this.processedEvents.delete(firstEvent);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      logger.debug(`üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${sender} –≤ ${roomId}: ${messageText}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
      if (!messageText.startsWith(config.matrix.commandPrefix)) {
        return; // –ù–µ –∫–æ–º–∞–Ω–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
      const commandText = messageText.slice(config.matrix.commandPrefix.length);
      const [command, ...args] = commandText.trim().split(' ');

      logger.info(`üîß –ö–æ–º–∞–Ω–¥–∞ –≤—ñ–¥ ${sender}: ${command} ${args.join(' ')}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ä–æ—É—Ç–µ—Ä
      if (this.router) {
        await this.router.handleCommand(command, args, event, room);
      } else {
        logger.warn('‚ö†Ô∏è –†–æ—É—Ç–µ—Ä –∫–æ–º–∞–Ω–¥ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      }

    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await this.sendMessage(event.getRoomId(), 
          '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
      } catch (sendError) {
        logger.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:', sendError);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É
   */
  async sendMessage(roomId, text) {
    try {
      if (!this.client) {
        throw new Error('–ö–ª—ñ—î–Ω—Ç Matrix –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (text.length > config.matrix.maxMessageLength) {
        text = text.substring(0, config.matrix.maxMessageLength - 3) + '...';
        logger.warn(`‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä—ñ–∑–∞–Ω–æ –¥–æ ${config.matrix.maxMessageLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
      }

      await this.client.sendTextMessage(roomId, text);
      logger.debug(`üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${roomId}: ${text.substring(0, 50)}...`);
      
    } catch (error) {
      logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ ${roomId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop() {
    try {
      logger.info('üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...');
      
      if (this.client) {
        await this.client.stopClient();
        logger.success('‚úÖ Matrix –∫–ª—ñ—î–Ω—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
      }
      
      this.isRunning = false;
      logger.success('‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
      
    } catch (error) {
      logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      userId: this.client?.getUserId(),
      deviceId: this.client?.getDeviceId(),
      homeserver: config.matrix.homeserverUrl
    };
  }
} 