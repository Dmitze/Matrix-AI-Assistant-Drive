/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
 */

import { logger } from '../utils/logger.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const config = {
  // === MATRIX –ù–ê–°–¢–†–û–ô–ö–ò ===
  matrix: {
    homeserver: process.env.MATRIX_HOMESERVER || 'https://matrix.org',
    username: process.env.MATRIX_USERNAME,
    password: process.env.MATRIX_PASSWORD,
    accessToken: process.env.MATRIX_ACCESS_TOKEN,
    deviceId: process.env.MATRIX_DEVICE_ID,
    roomId: process.env.MATRIX_ROOM_ID,
    maxMessageLength: parseInt(process.env.MATRIX_MAX_MESSAGE_LENGTH) || 4000,
    encryptionEnabled: process.env.MATRIX_ENCRYPTION_ENABLED === 'true',
    syncTimeout: parseInt(process.env.MATRIX_SYNC_TIMEOUT) || 30000,
    retryAttempts: parseInt(process.env.MATRIX_RETRY_ATTEMPTS) || 3,
    retryDelay: parseInt(process.env.MATRIX_RETRY_DELAY) || 1000
  },

  // === OLLAMA –ù–ê–°–¢–†–û–ô–ö–ò ===
  ollama: {
    baseURL: process.env.OLLAMA_BASE_URL || 'http://localhost:11434',
    model: process.env.OLLAMA_MODEL || 'llama2',
    timeout: parseInt(process.env.OLLAMA_TIMEOUT) || 60000,
    maxTokens: parseInt(process.env.OLLAMA_MAX_TOKENS) || 2048,
    temperature: parseFloat(process.env.OLLAMA_TEMPERATURE) || 0.7,
    topP: parseFloat(process.env.OLLAMA_TOP_P) || 0.9,
    retryAttempts: parseInt(process.env.OLLAMA_RETRY_ATTEMPTS) || 2,
    retryDelay: parseInt(process.env.OLLAMA_RETRY_DELAY) || 3000
  },

  // === GOOGLE DRIVE –ù–ê–°–¢–†–û–ô–ö–ò ===
  google: {
    credentialsPath: process.env.GOOGLE_CREDENTIALS_PATH,
    maxSearchResults: parseInt(process.env.GOOGLE_MAX_SEARCH_RESULTS) || 10,
    sheetRange: process.env.GOOGLE_SHEET_RANGE || 'A1:Z1000',
    retryAttempts: parseInt(process.env.GOOGLE_RETRY_ATTEMPTS) || 3,
    retryDelay: parseInt(process.env.GOOGLE_RETRY_DELAY) || 1000,
    timeout: parseInt(process.env.GOOGLE_TIMEOUT) || 30000
  },

  // === REDIS –ù–ê–°–¢–†–û–ô–ö–ò ===
  redis: {
    url: process.env.REDIS_URL || 'redis://localhost:6379',
    keyPrefix: process.env.REDIS_KEY_PREFIX || 'matrix_bot:',
    defaultTTL: parseInt(process.env.REDIS_DEFAULT_TTL) || 3600,
    maxRetries: parseInt(process.env.REDIS_MAX_RETRIES) || 3,
    retryDelay: parseInt(process.env.REDIS_RETRY_DELAY) || 500,
    timeout: parseInt(process.env.REDIS_TIMEOUT) || 5000
  },

  // === –ú–ï–¢–†–ò–ö–ò –ù–ê–°–¢–†–û–ô–ö–ò ===
  metrics: {
    port: parseInt(process.env.METRICS_PORT) || 9090,
    host: process.env.METRICS_HOST || '0.0.0.0',
    enabled: process.env.METRICS_ENABLED !== 'false',
    collectDefaultMetrics: process.env.METRICS_COLLECT_DEFAULT !== 'false',
    updateInterval: parseInt(process.env.METRICS_UPDATE_INTERVAL) || 5000
  },

  // === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ù–ê–°–¢–†–û–ô–ö–ò ===
  security: {
    enabled: process.env.SECURITY_ENABLED !== 'false',
    maxMessageLength: parseInt(process.env.SECURITY_MAX_MESSAGE_LENGTH) || 5000,
    rateLimitDefault: parseInt(process.env.SECURITY_RATE_LIMIT_DEFAULT) || 10,
    rateLimitWindow: parseInt(process.env.SECURITY_RATE_LIMIT_WINDOW) || 60000,
    allowedUsers: process.env.ALLOWED_USERS ? process.env.ALLOWED_USERS.split(',') : [],
    allowedRooms: process.env.ALLOWED_ROOMS ? process.env.ALLOWED_ROOMS.split(',') : [],
    blockedUsers: process.env.BLOCKED_USERS ? process.env.BLOCKED_USERS.split(',') : [],
    adminUsers: process.env.ADMIN_USERS ? process.env.ADMIN_USERS.split(',') : [],
    moderatorUsers: process.env.MODERATOR_USERS ? process.env.MODERATOR_USERS.split(',') : []
  },

  // === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
  logging: {
    level: process.env.LOG_LEVEL || 'info',
    format: process.env.LOG_FORMAT || 'text',
    timestamp: process.env.LOG_TIMESTAMP !== 'false',
    colors: process.env.LOG_COLORS !== 'false',
    file: process.env.LOG_FILE,
    maxSize: process.env.LOG_MAX_SIZE || '10m',
    maxFiles: parseInt(process.env.LOG_MAX_FILES) || 5
  },

  // === –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
  app: {
    name: process.env.APP_NAME || 'Matrix AI Assistant Drive',
    version: process.env.APP_VERSION || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    debug: process.env.DEBUG === 'true',
    gracefulShutdownTimeout: parseInt(process.env.GRACEFUL_SHUTDOWN_TIMEOUT) || 30000
  }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function validateRequiredEnvVars() {
  const required = [
    'MATRIX_USERNAME',
    'MATRIX_PASSWORD'
  ];

  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    logger.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:', missing);
    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: ${missing.join(', ')}`);
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function validateConfig() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    validateRequiredEnvVars();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Matrix –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!config.matrix.homeserver.startsWith('http')) {
      throw new Error('MATRIX_HOMESERVER –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º URL');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Ollama –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!config.ollama.baseURL.startsWith('http')) {
      throw new Error('OLLAMA_BASE_URL –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º URL');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Redis –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (config.redis.url && !config.redis.url.startsWith('redis://')) {
      throw new Error('REDIS_URL –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º Redis URL');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    if (config.metrics.port < 1 || config.metrics.port > 65535) {
      throw new Error('METRICS_PORT –º–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 1-65535');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (config.security.maxMessageLength < 1) {
      throw new Error('SECURITY_MAX_MESSAGE_LENGTH –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
    }

    logger.success('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É –≤–∞–ª—ñ–¥–Ω–∞');

  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error.message);
    throw error;
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
 */
function logConfig() {
  logger.info('üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É:');
  logger.info(`   üè† Matrix Homeserver: ${config.matrix.homeserver}`);
  logger.info(`   üë§ Matrix Username: ${config.matrix.username}`);
  logger.info(`   üß† Ollama URL: ${config.ollama.baseURL}`);
  logger.info(`   üß† Ollama Model: ${config.ollama.model}`);
  logger.info(`   üíæ Redis: ${config.redis.url ? '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π' : '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'}`);
  logger.info(`   üìä –ú–µ—Ç—Ä–∏–∫–∏: ${config.metrics.enabled ? '–£–≤—ñ–º–∫–Ω–µ–Ω—ñ' : '–í–∏–º–∫–Ω–µ–Ω—ñ'}`);
  logger.info(`   üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞: ${config.security.enabled ? '–£–≤—ñ–º–∫–Ω–µ–Ω–∞' : '–í–∏–º–∫–Ω–µ–Ω–∞'}`);
  logger.info(`   üìÅ Google Drive: ${config.google.credentialsPath ? '–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π' : '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'}`);
  logger.info(`   üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${config.app.environment}`);
  logger.info(`   üêõ Debug: ${config.app.debug ? '–£–≤—ñ–º–∫–Ω–µ–Ω–∏–π' : '–í–∏–º–∫–Ω–µ–Ω–∏–π'}`);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
 */
function getModuleConfig(moduleName) {
  return config[moduleName] || {};
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
 */
function isServiceConfigured(serviceName) {
  switch (serviceName) {
    case 'redis':
      return !!config.redis.url;
    case 'google':
      return !!config.google.credentialsPath;
    case 'ollama':
      return !!config.ollama.baseURL;
    case 'metrics':
      return config.metrics.enabled;
    case 'security':
      return config.security.enabled;
    default:
      return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function getFullConfig() {
  return {
    ...config,
    services: {
      redis: isServiceConfigured('redis'),
      google: isServiceConfigured('google'),
      ollama: isServiceConfigured('ollama'),
      metrics: isServiceConfigured('metrics'),
      security: isServiceConfigured('security')
    }
  };
}

// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
validateConfig();

// –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
logConfig();

export default config;
export { validateConfig, logConfig, getModuleConfig, isServiceConfigured, getFullConfig }; 