/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ:
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Redis —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ Prometheus
 * - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —Ä–æ–ª—è–º–∏
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF/Office —Ñ–∞–π–ª–æ–≤
 * - –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 */

import dotenv from 'dotenv';
import { logger } from './src/utils/logger.js';
import config from './src/config/config.js';
import { LLMProcessor } from './src/llm.js';
import { GoogleDriveHandler } from './src/gdrive.js';
import { cacheManager, getCachedResponse, setCachedResponse } from './src/cache.js';
import { metricsCollector, recordBotRequest, recordLLMLatency } from './src/metrics.js';
import { securityManager, checkSecurity } from './src/security.js';
import { withRetry, testRetryMechanism } from './src/utils/retry.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function testCaching() {
  logger.info('üíæ === –¢–ï–°–¢ 1: –ö–ï–®–£–í–ê–ù–ù–Ø REDIS –ó –ü–û–í–¢–û–†–ù–ò–ú–ò –°–ü–†–û–ë–ê–ú–ò ===');
  
  try {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (cacheManager.isAvailable()) {
      logger.success('‚úÖ Redis –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const testKey = 'test_key';
      const testData = { message: '–ü—Ä–∏–≤—ñ—Ç –∑ –∫–µ—à—É!', timestamp: Date.now() };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const saved = await withRetry(async () => {
        return await cacheManager.set(testKey, testData, 60);
      }, { maxAttempts: 2, baseDelay: 100 });
      
      if (saved) {
        logger.success('‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –∫–µ—à –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const retrieved = await withRetry(async () => {
        return await cacheManager.get(testKey);
      }, { maxAttempts: 2, baseDelay: 100 });
      
      if (retrieved && retrieved.message === testData.message) {
        logger.success('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ –∫–µ—à—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏');
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è LLM
      const userId = 'test_user';
      const prompt = '–©–æ —Ç–∞–∫–µ AI?';
      const response = 'AI - —Ü–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç';
      
      await setCachedResponse(userId, prompt, response);
      const cachedResponse = await getCachedResponse(userId, prompt);
      
      if (cachedResponse === response) {
        logger.success('‚úÖ –ö–µ—à—É–≤–∞–Ω–Ω—è LLM –ø—Ä–∞—Ü—é—î');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await cacheManager.getStats();
      logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:', stats);
      
    } else {
      logger.warn('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      logger.info('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Redis –∑–∞–ø—É—â–µ–Ω–∏–π: redis-server');
    }
    
    return cacheManager.isAvailable();
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
async function testMetrics() {
  logger.info('üìä === –¢–ï–°–¢ 2: –†–û–ó–®–ò–†–ï–ù–Ü –ú–ï–¢–†–ò–ö–ò PROMETHEUS ===');
  
  try {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    recordBotRequest('test', 'success', 'admin');
    recordLLMLatency(1.5, 'llama2', 'generate');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const { recordSecurityBlocked, recordRateLimitExceeded } = await import('./src/metrics.js');
    recordSecurityBlocked('test_reason', 'admin');
    recordRateLimitExceeded('test_command', 'user');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç—Ä–∏–∫
    const stats = metricsCollector.getStats();
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫:', stats);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫
    await metricsCollector.startServer();
    logger.success('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    const healthUrl = `http://localhost:${config.metrics.port}/health`;
    logger.info(`üè• Health check –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${healthUrl}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await metricsCollector.stopServer();
    logger.success('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ');
    
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async function testSecurity() {
  logger.info('üõ°Ô∏è === –¢–ï–°–¢ 3: –†–û–ó–®–ò–†–ï–ù–ê –°–ò–°–¢–ï–ú–ê –ë–ï–ó–ü–ï–ö–ò ===');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const validMessage = '–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!';
    const invalidMessage = 'a'.repeat(6000); // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    
    const validResult = securityManager.validateMessage(validMessage);
    const invalidResult = securityManager.validateMessage(invalidMessage);
    
    if (validResult.valid) {
      logger.success('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    }
    
    if (!invalidResult.valid) {
      logger.success('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–µ–π
    const adminCheck = securityManager.checkUserAccess('@admin:domain.com', 'admin');
    const userCheck = securityManager.checkUserAccess('@user:domain.com', 'read');
    const guestCheck = securityManager.checkUserAccess('@guest:domain.com', 'write');
    
    logger.info('üë• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª–µ–π:', {
      admin: adminCheck,
      user: userCheck,
      guest: guestCheck
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting
    const userId = 'test_user';
    const command = 'test_command';
    
    for (let i = 0; i < 5; i++) {
      const rateLimitResult = securityManager.checkRateLimit(userId, command, 3, 60000);
      logger.debug(`Rate limit check ${i + 1}:`, rateLimitResult);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const securityCheck = checkSecurity(userId, 'test_room', 'help', [], validMessage);
    logger.info('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏:', securityCheck);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ —Å —Ä–æ–ª—è–º–∏
    const adminCommandCheck = securityManager.validateCommand('admin_restart', [], 'admin');
    const userCommandCheck = securityManager.validateCommand('admin_restart', [], 'user');
    
    logger.info('üîê –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ –∑ —Ä–æ–ª—è–º–∏:', {
      admin: adminCommandCheck,
      user: userCommandCheck
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const stats = securityManager.getStats();
    logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–ø–µ–∫–∏:', stats);
    
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
async function testRetryMechanism() {
  logger.info('üîÑ === –¢–ï–°–¢ 4: –ú–ï–•–ê–ù–Ü–ó–ú –ü–û–í–¢–û–†–ù–ò–• –°–ü–†–û–ë ===');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    const retryResult = await testRetryMechanism();
    if (retryResult) {
      logger.success('‚úÖ –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –ø—Ä–∞—Ü—é—î');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    let attemptCount = 0;
    const failingOperation = async () => {
      attemptCount++;
      if (attemptCount < 3) {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è');
      }
      return '–£—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
    };
    
    const result = await withRetry(failingOperation, {
      maxAttempts: 3,
      baseDelay: 100
    });
    
    if (result === '–£—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç') {
      logger.success('‚úÖ –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏ –ø—Ä–∞—Ü—é—é—Ç—å');
    }
    
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ö–∞–Ω—ñ–∑–º—É –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function testFileProcessing() {
  logger.info('üìÑ === –¢–ï–°–¢ 5: –û–ë–†–û–ë–ö–ê –§–ê–ô–õ–Ü–í –ó –ü–û–í–¢–û–†–ù–ò–ú–ò –°–ü–†–û–ë–ê–ú–ò ===');
  
  try {
    const gdrive = new GoogleDriveHandler();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (gdrive.isConfigured()) {
      logger.success('‚úÖ Google Drive –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      try {
        const files = await gdrive.findFiles('test');
        logger.info(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${files.length}`);
        
        if (files.length > 0) {
          const file = files[0];
          logger.info(`üìÑ –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: ${file.name} (${file.mimeType})`);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          try {
            const fileContent = await gdrive.readFile(file.id);
            logger.success(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${fileContent.name} (${fileContent.characterCount} —Å–∏–º–≤–æ–ª—ñ–≤)`);
          } catch (readError) {
            logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è):', readError.message);
          }
        }
      } catch (error) {
        logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è):', error.message);
      }
      
    } else {
      logger.warn('‚ö†Ô∏è Google Drive –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
      logger.info('üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ Google Drive');
    }
    
    return gdrive.isConfigured();
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function testLLMWithRetry() {
  logger.info('üß† === –¢–ï–°–¢ 6: LLM –ó –ü–û–í–¢–û–†–ù–ò–ú–ò –°–ü–†–û–ë–ê–ú–ò ===');
  
  try {
    const llm = new LLMProcessor();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (llm.isAvailable) {
      logger.success('‚úÖ LLM –¥–æ—Å—Ç—É–ø–Ω–∏–π');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
      try {
        const result = await llm.generateResponse('–°–∫–∞–∂–∏ "–ü—Ä–∏–≤—ñ—Ç" —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.', {
          temperature: 0.1,
          maxTokens: 50
        });
        
        logger.success(`‚úÖ LLM –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${result.response}`);
        logger.info(`üìä –î–µ—Ç–∞–ª—ñ: ${result.duration.toFixed(2)}s, ${result.tokens.total} —Ç–æ–∫–µ–Ω—ñ–≤`);
        
      } catch (llmError) {
        logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ LLM (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π):', llmError.message);
      }
      
    } else {
      logger.warn('‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      logger.info('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Ollama –∑–∞–ø—É—â–µ–Ω–∏–π: ollama serve');
    }
    
    return llm.isAvailable;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è LLM:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ LLM
async function testStreamingLLM() {
  logger.info('üåä === –¢–ï–°–¢ 7: –°–¢–†–ò–ú–Ü–ù–ì–û–í–ò–ô LLM ===');
  
  try {
    const llm = new LLMProcessor();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    if (llm.isAvailable) {
      logger.success('‚úÖ LLM –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º—ñ–Ω–≥—É');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
      try {
        let chunkCount = 0;
        let fullResponse = '';
        
        const result = await llm.generateStreamingResponse('–†–æ–∑–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –∫–æ—Å–º–æ—Å.', (chunk, info) => {
          chunkCount++;
          fullResponse += chunk;
          
          if (info.done) {
            logger.success(`‚úÖ –°—Ç—Ä–∏–º—ñ–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${info.chunkCount} —á–∞–Ω–∫—ñ–≤, ${Math.round(info.totalTokens)} —Ç–æ–∫–µ–Ω—ñ–≤`);
          } else {
            logger.debug(`üì¶ –ß–∞–Ω–∫ ${chunkCount}: "${chunk}"`);
          }
        }, {
          temperature: 0.1,
          maxTokens: 100
        });
        
        logger.success(`‚úÖ –°—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤–∏–π LLM –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${result.response.substring(0, 100)}...`);
        logger.info(`üìä –î–µ—Ç–∞–ª—ñ —Å—Ç—Ä–∏–º—ñ–Ω–≥—É: ${result.duration.toFixed(2)}s, ${result.chunks} —á–∞–Ω–∫—ñ–≤, ${result.tokens.total} —Ç–æ–∫–µ–Ω—ñ–≤`);
        
      } catch (streamingError) {
        logger.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤–æ–≥–æ LLM (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π):', streamingError.message);
      }
      
    } else {
      logger.warn('‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º—ñ–Ω–≥—É');
      logger.info('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Ollama –∑–∞–ø—É—â–µ–Ω–∏–π: ollama serve');
    }
    
    return llm.isAvailable;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∏–º—ñ–Ω–≥–æ–≤–æ–≥–æ LLM:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function testIntegration() {
  logger.info('üîó === –¢–ï–°–¢ 7: –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –í–°–Ü–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í ===');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ
    const llm = new LLMProcessor();
    const gdrive = new GoogleDriveHandler();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const components = {
      llm: llm.isServerAvailable(),
      gdrive: gdrive.isConfigured(),
      cache: cacheManager.isAvailable(),
      security: true, // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
      metrics: true,   // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
      retry: true      // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    };
    
    logger.info('üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:', components);
    
    const availableCount = Object.values(components).filter(Boolean).length;
    const totalCount = Object.keys(components).length;
    
    logger.info(`üìà –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${availableCount}/${totalCount}`);
    
    if (availableCount >= 4) {
      logger.success('‚úÖ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å');
    } else {
      logger.warn('‚ö†Ô∏è –î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
    const testUserId = 'test_user';
    const testRoomId = 'test_room';
    const testCommand = 'help';
    const testMessage = '–ü—Ä–∏–≤—ñ—Ç, –±–æ—Ç–µ!';
    
    const securityResult = checkSecurity(testUserId, testRoomId, testCommand, [], testMessage);
    logger.info('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:', securityResult);
    
    return availableCount >= 4;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  logger.info('‚ö° === –¢–ï–°–¢ 8: –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨ ===');
  
  try {
    const startTime = Date.now();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    const llm = new LLMProcessor();
    const gdrive = new GoogleDriveHandler();
    
    const initTime = Date.now() - startTime;
    logger.info(`‚è±Ô∏è –ß–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—ñ–≤: ${initTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const cacheStart = Date.now();
    await cacheManager.set('perf_test', { data: 'test' }, 60);
    const cacheTime = Date.now() - cacheStart;
    logger.info(`‚è±Ô∏è –ß–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –∫–µ—à—É–≤–∞–Ω–Ω—è: ${cacheTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const metricsStart = Date.now();
    recordBotRequest('perf_test', 'success');
    const metricsTime = Date.now() - metricsStart;
    logger.info(`‚è±Ô∏è –ß–∞—Å –∑–∞–ø–∏—Å—É –º–µ—Ç—Ä–∏–∫–∏: ${metricsTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    const securityStart = Date.now();
    checkSecurity('test_user', 'test_room', 'test', [], 'test message');
    const securityTime = Date.now() - securityStart;
    logger.info(`‚è±Ô∏è –ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏: ${securityTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    const retryStart = Date.now();
    await withRetry(async () => Promise.resolve('success'), { maxAttempts: 1, baseDelay: 1 });
    const retryTime = Date.now() - retryStart;
    logger.info(`‚è±Ô∏è –ß–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏: ${retryTime}ms`);
    
    logger.success('‚úÖ –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runEnhancedTests() {
  logger.info('üß™ === –ó–ê–ü–£–°–ö –ü–û–ö–†–ê–©–ï–ù–ò–• –¢–ï–°–¢–Ü–í ===');
  logger.info(`üïê –ß–∞—Å –∑–∞–ø—É—Å–∫—É: ${new Date().toISOString()}`);
  logger.info(`üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${process.env.NODE_ENV || 'development'}`);
  
  const results = {
    caching: false,
    metrics: false,
    security: false,
    retry: false,
    fileProcessing: false,
    llm: false,
    streaming: false,
    integration: false,
    performance: false
  };
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results.caching = await testCaching();
    results.metrics = await testMetrics();
    results.security = await testSecurity();
    results.retry = await testRetryMechanism();
    results.fileProcessing = await testFileProcessing();
    results.llm = await testLLMWithRetry();
    results.streaming = await testStreamingLLM();
    results.integration = await testIntegration();
    results.performance = await testPerformance();
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info('üìä === –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ ===');
    
    const passed = Object.values(results).filter(Boolean).length;
    const total = Object.keys(results).length;
    
    Object.entries(results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ' : '‚ùå';
      logger.info(`${status} ${test}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
    });
    
    logger.info(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passed >= total * 0.7) {
      logger.success('üéâ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    } else {
      logger.warn(`‚ö†Ô∏è ${total - passed} —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ`);
      logger.info('üí° –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è–∫—â–æ –Ω–µ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:');
    if (!results.caching) {
      logger.info('   - –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å Redis –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è');
    }
    if (!results.fileProcessing) {
      logger.info('   - –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Google Drive –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—ñ–≤');
    }
    if (!results.llm) {
      logger.info('   - –ó–∞–ø—É—Å—Ç—ñ—Ç—å Ollama –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ LLM');
    }
    if (!results.metrics) {
      logger.info('   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø–æ—Ä—Ç—É –¥–ª—è –º–µ—Ç—Ä–∏–∫');
    }
    
  } catch (error) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ç–µ—Å—Ç—ñ–≤:', error);
  }
  
  // –û—á–∏—Å—Ç–∫–∞
  try {
    await cacheManager.disconnect();
    await metricsCollector.stopServer();
  } catch (error) {
    logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ:', error);
  }
  
  logger.info('üèÅ === –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runEnhancedTests(); 